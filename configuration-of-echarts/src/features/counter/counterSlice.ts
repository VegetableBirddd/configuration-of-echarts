import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../redux/store';
import { fetchCount } from './counterAPI';

export interface CounterState {
  value: number;
  status: 'idle' | 'loading' | 'failed';
  test:number;
}

const initialState: CounterState = {
  value: 0,
  status: 'idle',
  test:123
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

//下面的函数被称为thunk，允许我们执行异步逻辑。它可以像普通动作一样派发：dispatch(incrementAsync(10))。这将使用dispatch函数作为
//第一个参数来调用thunk。然后，可以执行异步代码并派发其他动作。Thunk通常用于进行异步请求。
export const incrementAsync = createAsyncThunk(
  'counter/fetchCount',
  async (amount: number) => {
    const response = await fetchCount(amount);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const testAsync = createAsyncThunk(
  'test/fetchTest',
  async (amount: number) => {
    const response = await fetchCount(amount);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const counterSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      
      //Redux Toolkit允许我们在reducer中编写“mutating”逻辑。它实际上并不直接改变状态，而是使用Immer库来检测对"草稿状态"的更改，
      //并基于这些更改生成全新的不可变状态
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.

  // extraReducers字段允许切片处理在其他地方定义的动作，包括由createAsyncThunk生成的动作或其他切片中的动作。
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value += action.payload;
        
      })
      .addCase(incrementAsync.rejected, (state) => {
        state.status = 'failed';
      })
      
      .addCase(testAsync.pending,(state)=>{
        state.status = 'loading';
      })
      .addCase(testAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.test += action.payload;
        
      })
      .addCase(testAsync.rejected, (state) => {
        state.status = 'failed';
      })
    
  },
});

export const { increment, decrement, incrementByAmount } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

//下面的函数被称为选择器，它允许我们从state选择一个值。选择器也可以内联定义，在使用它们的地方而不是在切片文件中定义。例如：useSelector((state: RootState) => state.counter.value)
export const selectCount = (state: RootState) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

//我们也可以手动编写thunk函数，其中可以包含同步和异步逻辑。以下是一个根据当前状态有条件地派发动作的示例
export const incrementIfOdd =
  (amount: number): AppThunk =>
  (dispatch, getState) => {
    const currentValue = selectCount(getState());
    if (currentValue % 2 === 1) {
      dispatch(incrementByAmount(amount));
    }
  };

export default counterSlice.reducer;
